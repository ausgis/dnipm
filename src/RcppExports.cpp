// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bezierInterpolation
double bezierInterpolation(double x, double y, const Rcpp::NumericMatrix& xs, const Rcpp::NumericMatrix& ys, const Rcpp::NumericMatrix& zs, bool NA_rm);
RcppExport SEXP _dnipm_bezierInterpolation(SEXP xSEXP, SEXP ySEXP, SEXP xsSEXP, SEXP ysSEXP, SEXP zsSEXP, SEXP NA_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< bool >::type NA_rm(NA_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(bezierInterpolation(x, y, xs, ys, zs, NA_rm));
    return rcpp_result_gen;
END_RCPP
}
// bezierInterp
Rcpp::NumericVector bezierInterp(Rcpp::NumericMatrix xy, Rcpp::NumericMatrix xs, Rcpp::NumericMatrix ys, Rcpp::NumericMatrix zs, bool NA_rm);
RcppExport SEXP _dnipm_bezierInterp(SEXP xySEXP, SEXP xsSEXP, SEXP ysSEXP, SEXP zsSEXP, SEXP NA_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< bool >::type NA_rm(NA_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(bezierInterp(xy, xs, ys, zs, NA_rm));
    return rcpp_result_gen;
END_RCPP
}
// bicubicInterp
Rcpp::NumericVector bicubicInterp(Rcpp::NumericMatrix xy, Rcpp::NumericMatrix xs, Rcpp::NumericMatrix ys, Rcpp::NumericMatrix zs, bool NA_rm);
RcppExport SEXP _dnipm_bicubicInterp(SEXP xySEXP, SEXP xsSEXP, SEXP ysSEXP, SEXP zsSEXP, SEXP NA_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< bool >::type NA_rm(NA_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(bicubicInterp(xy, xs, ys, zs, NA_rm));
    return rcpp_result_gen;
END_RCPP
}
// bilinearInterp
Rcpp::NumericVector bilinearInterp(Rcpp::NumericMatrix xy, Rcpp::NumericMatrix xs, Rcpp::NumericMatrix ys, Rcpp::NumericMatrix zs, bool NA_rm);
RcppExport SEXP _dnipm_bilinearInterp(SEXP xySEXP, SEXP xsSEXP, SEXP ysSEXP, SEXP zsSEXP, SEXP NA_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< bool >::type NA_rm(NA_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(bilinearInterp(xy, xs, ys, zs, NA_rm));
    return rcpp_result_gen;
END_RCPP
}
// bsplineInterpolation
double bsplineInterpolation(double x, double y, const Rcpp::NumericMatrix& xs, const Rcpp::NumericMatrix& ys, const Rcpp::NumericMatrix& zs, int polydegreeX, int polydegreeY, bool NA_rm);
RcppExport SEXP _dnipm_bsplineInterpolation(SEXP xSEXP, SEXP ySEXP, SEXP xsSEXP, SEXP ysSEXP, SEXP zsSEXP, SEXP polydegreeXSEXP, SEXP polydegreeYSEXP, SEXP NA_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< int >::type polydegreeX(polydegreeXSEXP);
    Rcpp::traits::input_parameter< int >::type polydegreeY(polydegreeYSEXP);
    Rcpp::traits::input_parameter< bool >::type NA_rm(NA_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineInterpolation(x, y, xs, ys, zs, polydegreeX, polydegreeY, NA_rm));
    return rcpp_result_gen;
END_RCPP
}
// bsplineInterp
Rcpp::NumericVector bsplineInterp(Rcpp::NumericMatrix xy, Rcpp::NumericMatrix xs, Rcpp::NumericMatrix ys, Rcpp::NumericMatrix zs, int polydegreeX, int polydegreeY, bool NA_rm);
RcppExport SEXP _dnipm_bsplineInterp(SEXP xySEXP, SEXP xsSEXP, SEXP ysSEXP, SEXP zsSEXP, SEXP polydegreeXSEXP, SEXP polydegreeYSEXP, SEXP NA_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< int >::type polydegreeX(polydegreeXSEXP);
    Rcpp::traits::input_parameter< int >::type polydegreeY(polydegreeYSEXP);
    Rcpp::traits::input_parameter< bool >::type NA_rm(NA_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplineInterp(xy, xs, ys, zs, polydegreeX, polydegreeY, NA_rm));
    return rcpp_result_gen;
END_RCPP
}
// lagrangeInterp
Rcpp::NumericVector lagrangeInterp(Rcpp::NumericMatrix xy, Rcpp::NumericMatrix xys, Rcpp::NumericVector zs, bool NA_rm);
RcppExport SEXP _dnipm_lagrangeInterp(SEXP xySEXP, SEXP xysSEXP, SEXP zsSEXP, SEXP NA_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xys(xysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< bool >::type NA_rm(NA_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(lagrangeInterp(xy, xys, zs, NA_rm));
    return rcpp_result_gen;
END_RCPP
}
// lagrangeBasis
double lagrangeBasis(double x, const Rcpp::NumericVector& x_coords, int i);
RcppExport SEXP _dnipm_lagrangeBasis(SEXP xSEXP, SEXP x_coordsSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x_coords(x_coordsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(lagrangeBasis(x, x_coords, i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dnipm_bezierInterpolation", (DL_FUNC) &_dnipm_bezierInterpolation, 6},
    {"_dnipm_bezierInterp", (DL_FUNC) &_dnipm_bezierInterp, 5},
    {"_dnipm_bicubicInterp", (DL_FUNC) &_dnipm_bicubicInterp, 5},
    {"_dnipm_bilinearInterp", (DL_FUNC) &_dnipm_bilinearInterp, 5},
    {"_dnipm_bsplineInterpolation", (DL_FUNC) &_dnipm_bsplineInterpolation, 8},
    {"_dnipm_bsplineInterp", (DL_FUNC) &_dnipm_bsplineInterp, 7},
    {"_dnipm_lagrangeInterp", (DL_FUNC) &_dnipm_lagrangeInterp, 4},
    {"_dnipm_lagrangeBasis", (DL_FUNC) &_dnipm_lagrangeBasis, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_dnipm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
